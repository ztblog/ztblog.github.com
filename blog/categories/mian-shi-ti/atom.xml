<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: 面试题 | iris]]></title>
  <link href="http://ztblog.github.io/blog/categories/mian-shi-ti/atom.xml" rel="self"/>
  <link href="http://ztblog.github.io/"/>
  <updated>2013-10-07T19:55:38+08:00</updated>
  <id>http://ztblog.github.io/</id>
  <author>
    <name><![CDATA[zhangteng]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[括号匹配]]></title>
    <link href="http://ztblog.github.io/blog/2013/10/07/kuohaopipei/"/>
    <updated>2013-10-07T16:36:00+08:00</updated>
    <id>http://ztblog.github.io/blog/2013/10/07/kuohaopipei</id>
    <content type="html"><![CDATA[<h3>原题</h3>

<p>给定字符串，输出括号是否匹配，例如，<br/>
1.&ldquo;()&rdquo; yes；<br/>
2.&ldquo;)(&rdquo; no；<br/>
3.&ldquo;(abcd(e)&rdquo; no；<br/>
4.&ldquo;(a)(b)&rdquo; yes。<br/>
要求必须用递归写，整个实现不可以出现一个循环语句.</p>

<h3>分析</h3>

<p>这个题目很多同学都见过了，如果没有后面的条件，会张口就说就来用栈来实现，时间复杂度O(n)，空间复杂度O(n)。这个是很好的一个解答，没有 问题的。但是我们在做面试题，准备面试的过程中，每一个题目都不应该仅仅局限于某一个方法。应该尝试更多的思路，尽管有些思路的时间、空间复杂度并不是很 好，但是可以带来变化，举一反三，这才是真正的收获。<br/>
这个题要求了，只目能使用递归并且不能出现循环语句。这个时候，我们应该如何处理呢？其实告诉了大家递归，就比较好想了：怎么定义好问题和子问题。<br/>
如果字符串中的括号是匹配的，则'(&lsquo;的数量和&rsquo;)&lsquo;的数量是相等的，反之是不相等的。这样，在递归的过程中，可以保存一个变量，用来记录&rsquo;(&lsquo;的 数量和&rsquo;)&lsquo;的数量是否匹配。这样定义递归问题f(p,count)，表示当前字符p之前的字符串中&rsquo;(&lsquo;的数量和&rsquo;)&lsquo;的数量的匹配情况，p表示指向当 前字符的指针。初始的时候，f(p, 0)，递归的过程如下：</p>

<p>如果p为空，则考察count是否为0，如果为0，则匹配；如果不为0，则不匹配；<br/>
如果不为空，则考察当前字符p，如果p=&lsquo;('，则递归调用f(p++, count++);如果p=&rsquo;)&lsquo;，则递归调用f(p++, count&mdash;)。如果p是其他的字符，并不是&rsquo;(&lsquo;和&rsquo;)&lsquo;，则递归调用f(p++, count)，count不变，继续考虑下一次字符。其中需要检查和保证count>=0.</p>

<p>其实，递归的问题有的时候不是那么好像的，需要大家不断的练习。如果不采用count来记录括号匹配的情况，这个题目的递归也不好想。</p>

<!-- more -->


<p>```</p>

<h1>include &lt;stdio.h></h1>

<h1>include &lt;string.h></h1>

<h1>include <iostream></h1>

<h1>include <string></h1>

<h1>include <algorithm></h1>

<h1>include <map></h1>

<p>using namespace std;
char s[10000];
bool match(char *s,int count) {</p>

<pre><code>if(!*s &amp;&amp; count==0)
    return true;
else if(!*s &amp;&amp; count!=0)
    return false;
if(count &lt; 0)
    return false;
if(*s == '(')
    match(s+1,count+1);
else if(*s == ')')
    match(s+1,count-1);
else
    match(s+1,count);
</code></pre>

<p>}
int main() {</p>

<pre><code>while(~scanf("%s",s)) {
    if(match(s,0)) {
        printf("yes!\n");
    }
    else {
        printf("no!\n");
    }
}
return 0;
</code></pre>

<p>}
```</p>
]]></content>
  </entry>
  
</feed>
