<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: java | iris]]></title>
  <link href="http://ztblog.github.io/blog/categories/java/atom.xml" rel="self"/>
  <link href="http://ztblog.github.io/"/>
  <updated>2013-11-01T10:52:44+08:00</updated>
  <id>http://ztblog.github.io/</id>
  <author>
    <name><![CDATA[zhangteng]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[JSON和bean互转]]></title>
    <link href="http://ztblog.github.io/blog/2013/10/21/json-to-bean/"/>
    <updated>2013-10-21T09:32:00+08:00</updated>
    <id>http://ztblog.github.io/blog/2013/10/21/json-to-bean</id>
    <content type="html"><![CDATA[<p>需要用到的类：</p>

<p><code>java
net.sf.json.JSONObject  
</code>
在包<code>json-lib-2.3-jdk15</code>中
maven依赖：</p>

<p><code>java
        &lt;dependency&gt;
            &lt;groupId&gt;net.sf.json-lib&lt;/groupId&gt;
            &lt;artifactId&gt;json-lib&lt;/artifactId&gt;
            &lt;version&gt;2.4&lt;/version&gt;
            &lt;classifier&gt;jdk15&lt;/classifier&gt;
        &lt;/dependency&gt;
</code>
将bean转换成JSONObject，调用<code>JSONObject.fromObject(object)</code>
如：</p>

<p><code>java
JSONObject jsonObject = JSONObject.fromObject(user);
</code></p>

<p>将JSONObject转换成bean，调用<code>JSONObject.toBean(jsonObject, beanClass)</code>
如：</p>

<p><code>java
User user = (User) JSONObject.toBean(jsonObject, User.class);
</code></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[删除Java集合中元素]]></title>
    <link href="http://ztblog.github.io/blog/2013/10/13/remove-elemetns/"/>
    <updated>2013-10-13T21:42:00+08:00</updated>
    <id>http://ztblog.github.io/blog/2013/10/13/remove-elemetns</id>
    <content type="html"><![CDATA[<p>有时候我们需要删除list中的某个元素，最开始我会这样写：</p>

<p>``` java
public class ListTest {
    public static void main(String[] args) {
        List<integer> numbers = new ArrayList();
        for(int i = 1;i &lt;= 10; ++i) {
            numbers.add(i);
        }</integer></p>

<pre><code>    for(int i = 0;i &lt; 10; ++i) {
        if(numbers.get(i) == 5) {
            numbers.remove(i);
        }
    }

    System.out.println(numbers);
} } ``` &lt;!-- more --&gt;
</code></pre>

<p>这样写之后，会报错。因为list在循环中的时候是不可以删除它的元素的。
对上面的代码进行一点下改进就可以删除list中的元素了，就是在<code>remove</code>之后加个<code>break</code>就可以了。</p>

<p>``` java
public class ListTest {
    public static void main(String[] args) {
        List<integer> numbers = new ArrayList();
        for(int i = 1;i &lt;= 10; ++i) {
            numbers.add(i);
        }</integer></p>

<pre><code>    for(int i = 0;i &lt; 10; ++i) {
        if(numbers.get(i) == 5) {
            numbers.remove(i);
            break;
        }
    }

    System.out.println(numbers);
} } ``` 上面的方法适用于只删除一个元素，可有的时候我们需要删除多个元素，上面的方法虽可行，但需要为每个需要删除的元素写个for循环，这样效率太低了。 使用`Iterator`可以完成上面的操作。
</code></pre>

<p>```java
public class ListTest {
    public static void main(String[] args) {
        List<integer> numbers = new ArrayList();
        for(int i = 1;i &lt;= 10; ++i) {
            numbers.add(i);
        }</integer></p>

<pre><code>    for(Iterator it=numbers.iterator() ;it.hasNext(); ) {
        Integer tmp = (Integer) it.next();
        if(tmp == 5) {
            it.remove();
        }
        if(tmp == 7) {
            it.remove();
        }
    }

    System.out.println(numbers);
} } ``` 上面的方法虽都可以删除元素，但都需要for循环，效率不高，但没有找到更好的方法。感觉java的Iterator没有c++的那么只能，用起来没有c++顺手。
</code></pre>

<blockquote>
  <p>对Java的基础知识了解越多，代码就会写得越简洁</p>
</blockquote>
]]></content>
  </entry>
  
</feed>
