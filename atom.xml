<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[iris]]></title>
  <link href="http://ztblog.github.io/atom.xml" rel="self"/>
  <link href="http://ztblog.github.io/"/>
  <updated>2013-10-07T23:18:43+08:00</updated>
  <id>http://ztblog.github.io/</id>
  <author>
    <name><![CDATA[zhangteng]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[找数字分析（出现一次的数字）]]></title>
    <link href="http://ztblog.github.io/blog/2013/10/07/zhaoshuzi/"/>
    <updated>2013-10-07T23:15:00+08:00</updated>
    <id>http://ztblog.github.io/blog/2013/10/07/zhaoshuzi</id>
    <content type="html"><![CDATA[<h3>原题</h3>

<p>数组A中，除了某一个数字X之外，其他数字都出现了三次，而X出现了一次。请给出最快的方法找到X。</p>

<h3>分析</h3>

<p>乍一看这个题目，不少同学立马给出了答案：异或。但举个例子，就会发现，异或是行不通的，一般的方法是利用异或的的如下特性：</p>

<p>A xor A = 0
A xor 0 = A</p>

<p>但是这个题目中，数字都是奇数个的，直接采用之前类似题目的异或方法，已经不合适了。<br/>
除此之外，我们还可能想到如下的方法：</p>

<p>采用hashmap，时间复杂度O(n)，空间复杂度O(n)</p>

<p>对数组A进行排序，然后在遍历一次，时间复杂度O(nlogn)，空间复杂度O(1)</p>

<p>是否还有一些效果更好的方法呢？这一类的题目，即使简单的异或不能解决，也可以从二进制位、位操作方面去考虑，总之这样的大方向是不会错的。</p>

<p>题目中，如果数组中的元素都是三个三个出现的，那么从二进制表示的角度，每个位上的1加起来，应该可以整除3。如果有一个数x只出现一次，会是什么情况呢？</p>

<p>如果某个特定位上的1加起来，可以被3整除，说明对应x的那位是0，因为如果是1，不可能被3整除<br/>
如果某个特定位上的1加起来，不可以被3整除，说明对应x的那位是1</p>

<p>根据上面的描述，我们可以开辟一个大小为32的数组，第0个元素表示，A中所有元素的二进制表示的最低位的和，依次类推。最后，再转换为十进制数即可。这里要说明的是，用一个大小为32的整数数组表示，同样空间是O(1)的。<br/>
不过这里申请了一个数组的空间，如果这个是不被允许的呢？请大家开动脑筋，我们会在后续的文章中分享。</p>

<p>代码：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>#include &lt;stdio.h&gt;
</span><span class='line'>#include &lt;string.h&gt;
</span><span class='line'>#include &lt;iostream&gt;
</span><span class='line'>#include &lt;string&gt;
</span><span class='line'>#include &lt;algorithm&gt;
</span><span class='line'>#include &lt;map&gt;
</span><span class='line'>using namespace std;
</span><span class='line'>int a[1000];
</span><span class='line'>int main() {
</span><span class='line'>    int n,i,j,k,cnt,ans;
</span><span class='line'>    scanf("%d", &n);
</span><span class='line'>    for(i = 0;i &lt; n; ++i) {
</span><span class='line'>        scanf("%d", &a[i]);
</span><span class='line'>    }
</span><span class='line'>    long tmp = 1;
</span><span class='line'>    ans = 0;
</span><span class='line'>    for(i = 0;i &lt; 32; ++i) {
</span><span class='line'>        cnt = 0;
</span><span class='line'>        for(j = 0;j &lt; n; ++j) {
</span><span class='line'>            cnt += a[j] & tmp;
</span><span class='line'>        }
</span><span class='line'>        if(cnt % 3 == 0) {
</span><span class='line'>            ans = ans | (0&lt;&lt;i);
</span><span class='line'>        } else {
</span><span class='line'>            ans = ans | (1&lt;&lt;i);
</span><span class='line'>        }
</span><span class='line'>        tmp = tmp &lt;&lt; 1;
</span><span class='line'>    }
</span><span class='line'>    printf("%d\n", ans);
</span><span class='line'>    return 0;
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<p></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[括号匹配]]></title>
    <link href="http://ztblog.github.io/blog/2013/10/07/kuohaopipei/"/>
    <updated>2013-10-07T16:36:00+08:00</updated>
    <id>http://ztblog.github.io/blog/2013/10/07/kuohaopipei</id>
    <content type="html"><![CDATA[<h2>原题</h2>

<p>  给定字符串，输出括号是否匹配，例如:</p>

<p>  1.&ldquo;()&rdquo; yes；<br/>
  2.&ldquo;)(&rdquo; no；<br/>
  3.&ldquo;(abcd(e)&rdquo; no；<br/>
  4.&ldquo;(a)(b)&rdquo; yes。</p>

<p>  要求必须用递归写，整个实现不可以出现一个循环语句.</p>

<h2>分析</h2>

<p>这个题目很多同学都见过了，如果没有后面的条件，会张口就说就来用栈来实现，时间复杂度O(n)，空间复杂度O(n)。这个是很好的一个解答，没有 问题的。但是我们在做面试题，准备面试的过程中，每一个题目都不应该仅仅局限于某一个方法。应该尝试更多的思路，尽管有些思路的时间、空间复杂度并不是很 好，但是可以带来变化，举一反三，这才是真正的收获。</p>

<p>这个题要求了，只目能使用递归并且不能出现循环语句。这个时候，我们应该如何处理呢？其实告诉了大家递归，就比较好想了：怎么定义好问题和子问题。</p>

<p>如果字符串中的括号是匹配的，则&#8217;(&lsquo;的数量和&rsquo;)&lsquo;的数量是相等的，反之是不相等的。这样，在递归的过程中，可以保存一个变量，用来记录&rsquo;(&lsquo;的 数量和&rsquo;)&lsquo;的数量是否匹配。这样定义递归问题f(p,count)，表示当前字符p之前的字符串中&rsquo;(&lsquo;的数量和&rsquo;)&lsquo;的数量的匹配情况，p表示指向当 前字符的指针。初始的时候，f(p, 0)，递归的过程如下：</p>

<p>如果p为空，则考察count是否为0，如果为0，则匹配；如果不为0，则不匹配；</p>

<p>如果不为空，则考察当前字符p，如果p=&lsquo;(&#8216;，则递归调用f(p++, count++);如果p=&rsquo;)&lsquo;，则递归调用f(p++, count&mdash;)。如果p是其他的字符，并不是&rsquo;(&lsquo;和&rsquo;)&lsquo;，则递归调用f(p++, count)，count不变，继续考虑下一次字符。其中需要检查和保证count>=0.</p>

<p>其实，递归的问题有的时候不是那么好像的，需要大家不断的练习。如果不采用count来记录括号匹配的情况，这个题目的递归也不好想。</p>

<!-- more -->


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>#include &lt;stdio.h&gt;
</span><span class='line'>#include &lt;string.h&gt;
</span><span class='line'>#include &lt;iostream&gt;
</span><span class='line'>#include &lt;string&gt;
</span><span class='line'>#include &lt;algorithm&gt;
</span><span class='line'>#include &lt;map&gt;
</span><span class='line'>using namespace std;
</span><span class='line'>char s[10000];
</span><span class='line'>bool match(char *s,int count) {
</span><span class='line'>    if(!*s && count==0)
</span><span class='line'>        return true;
</span><span class='line'>    else if(!*s && count!=0)
</span><span class='line'>        return false;
</span><span class='line'>    if(count &lt; 0)
</span><span class='line'>        return false;
</span><span class='line'>    if(*s == '(')
</span><span class='line'>        match(s+1,count+1);
</span><span class='line'>    else if(*s == ')')
</span><span class='line'>        match(s+1,count-1);
</span><span class='line'>    else
</span><span class='line'>        match(s+1,count);
</span><span class='line'>}
</span><span class='line'>int main() {
</span><span class='line'>    while(~scanf("%s",s)) {
</span><span class='line'>        if(match(s,0)) {
</span><span class='line'>            printf("yes!\n");
</span><span class='line'>        }
</span><span class='line'>        else {
</span><span class='line'>            printf("no!\n");
</span><span class='line'>        }
</span><span class='line'>    }
</span><span class='line'>    return 0;
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[第一篇博文]]></title>
    <link href="http://ztblog.github.io/blog/2013/10/07/first-blog/"/>
    <updated>2013-10-07T16:13:00+08:00</updated>
    <id>http://ztblog.github.io/blog/2013/10/07/first-blog</id>
    <content type="html"><![CDATA[<p>这个博客的第一篇博文。</p>

<p>以前用过wordpress，不过基本没有去维护它，上面也没有东西。这次选择了Octopress，他是基于markdown的，挂在github上，无限流量。最主要的还是喜欢它那句宣传语。</p>

<p>这个博客来得不易啊，前前后后折腾了好多。主要还是太菜了，啥也不会。</p>

<p>搭的时候看了很多网上的教材，都大同小异，开始的时候也不是很细心，不是这出错就是那出错。</p>

<p>最后还是看了官网教程，上面说的肯定是对的，虽然是英文，还是能看懂的。</p>

<p>以后要学生么东西，最好还是看看官方说明吧，虽说网上好多都和官方说的差不多，但有时候还是会有一些差异的。</p>

<p>这个博客来的不易，也希望自己以后能多写点东西，多做点记录。也是对所学东西的总结。</p>

<p>最后，贴上octopress的官网：<a href="http://octopress.org/">http://octopress.org/</a></p>

<blockquote><p>像黑客一样写博客。</p></blockquote>
]]></content>
  </entry>
  
</feed>
