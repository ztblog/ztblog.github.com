<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[iris]]></title>
  <link href="http://ztblog.github.io/atom.xml" rel="self"/>
  <link href="http://ztblog.github.io/"/>
  <updated>2013-10-21T10:56:48+08:00</updated>
  <id>http://ztblog.github.io/</id>
  <author>
    <name><![CDATA[zhangteng]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[JSON和bean互转]]></title>
    <link href="http://ztblog.github.io/blog/2013/10/21/json-to-bean/"/>
    <updated>2013-10-21T09:32:00+08:00</updated>
    <id>http://ztblog.github.io/blog/2013/10/21/json-to-bean</id>
    <content type="html"><![CDATA[<p>需要用到的类：</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="java"><span class="line"><span class="n">net</span><span class="o">.</span><span class="na">sf</span><span class="o">.</span><span class="na">json</span><span class="o">.</span><span class="na">JSONObject</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>
<p>在包<code>json-lib-2.3-jdk15</code>中
maven依赖：</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
</pre></td><td class="code"><pre><code class="java"><span class="line">    <span class="o">&lt;</span><span class="n">dependency</span><span class="o">&gt;</span>
</span><span class="line">        <span class="o">&lt;</span><span class="n">groupId</span><span class="o">&gt;</span><span class="n">net</span><span class="o">.</span><span class="na">sf</span><span class="o">.</span><span class="na">json</span><span class="o">-</span><span class="n">lib</span><span class="o">&lt;/</span><span class="n">groupId</span><span class="o">&gt;</span>
</span><span class="line">        <span class="o">&lt;</span><span class="n">artifactId</span><span class="o">&gt;</span><span class="n">json</span><span class="o">-</span><span class="n">lib</span><span class="o">&lt;/</span><span class="n">artifactId</span><span class="o">&gt;</span>
</span><span class="line">        <span class="o">&lt;</span><span class="n">version</span><span class="o">&gt;</span><span class="mf">2.4</span><span class="o">&lt;/</span><span class="n">version</span><span class="o">&gt;</span>
</span><span class="line">        <span class="o">&lt;</span><span class="n">classifier</span><span class="o">&gt;</span><span class="n">jdk15</span><span class="o">&lt;/</span><span class="n">classifier</span><span class="o">&gt;</span>
</span><span class="line">    <span class="o">&lt;/</span><span class="n">dependency</span><span class="o">&gt;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>
<p>将bean转换成JSONObject，调用<code>JSONObject.fromObject(object)</code>
如：</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="java"><span class="line"><span class="n">JSONObject</span> <span class="n">jsonObject</span> <span class="o">=</span> <span class="n">JSONObject</span><span class="o">.</span><span class="na">fromObject</span><span class="o">(</span><span class="n">user</span><span class="o">);</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>将JSONObject转换成bean，调用<code>JSONObject.toBean(jsonObject, beanClass)</code>
如：</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="java"><span class="line"><span class="n">User</span> <span class="n">user</span> <span class="o">=</span> <span class="o">(</span><span class="n">User</span><span class="o">)</span> <span class="n">JSONObject</span><span class="o">.</span><span class="na">toBean</span><span class="o">(</span><span class="n">jsonObject</span><span class="o">,</span> <span class="n">User</span><span class="o">.</span><span class="na">class</span><span class="o">);</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[删除Java集合中元素]]></title>
    <link href="http://ztblog.github.io/blog/2013/10/13/remove-elemetns/"/>
    <updated>2013-10-13T21:42:00+08:00</updated>
    <id>http://ztblog.github.io/blog/2013/10/13/remove-elemetns</id>
    <content type="html"><![CDATA[<p>有时候我们需要删除list中的某个元素，最开始我会这样写：</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
</pre></td><td class="code"><pre><code class="java"><span class="line"><span class="kd">public</span> <span class="kd">class</span> <span class="nc">ListTest</span> <span class="o">{</span>
</span><span class="line">    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="n">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>
</span><span class="line">        <span class="n">List</span><span class="o">&lt;</span><span class="n">Integer</span><span class="o">&gt;</span> <span class="n">numbers</span> <span class="o">=</span> <span class="k">new</span> <span class="n">ArrayList</span><span class="o">();</span>
</span><span class="line">        <span class="k">for</span><span class="o">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">1</span><span class="o">;</span><span class="n">i</span> <span class="o">&lt;=</span> <span class="mi">10</span><span class="o">;</span> <span class="o">++</span><span class="n">i</span><span class="o">)</span> <span class="o">{</span>
</span><span class="line">            <span class="n">numbers</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="n">i</span><span class="o">);</span>
</span><span class="line">        <span class="o">}</span>
</span><span class="line">
</span><span class="line">        <span class="k">for</span><span class="o">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span><span class="n">i</span> <span class="o">&lt;</span> <span class="mi">10</span><span class="o">;</span> <span class="o">++</span><span class="n">i</span><span class="o">)</span> <span class="o">{</span>
</span><span class="line">            <span class="k">if</span><span class="o">(</span><span class="n">numbers</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="n">i</span><span class="o">)</span> <span class="o">==</span> <span class="mi">5</span><span class="o">)</span> <span class="o">{</span>
</span><span class="line">                <span class="n">numbers</span><span class="o">.</span><span class="na">remove</span><span class="o">(</span><span class="n">i</span><span class="o">);</span>
</span><span class="line">            <span class="o">}</span>
</span><span class="line">        <span class="o">}</span>
</span><span class="line">
</span><span class="line">        <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">numbers</span><span class="o">);</span>
</span><span class="line">    <span class="o">}</span>
</span><span class="line"><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>
<!-- more -->

<p>这样写之后，会报错。因为list在循环中的时候是不可以删除它的元素的。
对上面的代码进行一点下改进就可以删除list中的元素了，就是在<code>remove</code>之后加个<code>break</code>就可以了。</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
</pre></td><td class="code"><pre><code class="java"><span class="line"><span class="kd">public</span> <span class="kd">class</span> <span class="nc">ListTest</span> <span class="o">{</span>
</span><span class="line">    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="n">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>
</span><span class="line">        <span class="n">List</span><span class="o">&lt;</span><span class="n">Integer</span><span class="o">&gt;</span> <span class="n">numbers</span> <span class="o">=</span> <span class="k">new</span> <span class="n">ArrayList</span><span class="o">();</span>
</span><span class="line">        <span class="k">for</span><span class="o">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">1</span><span class="o">;</span><span class="n">i</span> <span class="o">&lt;=</span> <span class="mi">10</span><span class="o">;</span> <span class="o">++</span><span class="n">i</span><span class="o">)</span> <span class="o">{</span>
</span><span class="line">            <span class="n">numbers</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="n">i</span><span class="o">);</span>
</span><span class="line">        <span class="o">}</span>
</span><span class="line">
</span><span class="line">        <span class="k">for</span><span class="o">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span><span class="n">i</span> <span class="o">&lt;</span> <span class="mi">10</span><span class="o">;</span> <span class="o">++</span><span class="n">i</span><span class="o">)</span> <span class="o">{</span>
</span><span class="line">            <span class="k">if</span><span class="o">(</span><span class="n">numbers</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="n">i</span><span class="o">)</span> <span class="o">==</span> <span class="mi">5</span><span class="o">)</span> <span class="o">{</span>
</span><span class="line">                <span class="n">numbers</span><span class="o">.</span><span class="na">remove</span><span class="o">(</span><span class="n">i</span><span class="o">);</span>
</span><span class="line">                <span class="k">break</span><span class="o">;</span>
</span><span class="line">            <span class="o">}</span>
</span><span class="line">        <span class="o">}</span>
</span><span class="line">
</span><span class="line">        <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">numbers</span><span class="o">);</span>
</span><span class="line">    <span class="o">}</span>
</span><span class="line"><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>
<p>上面的方法适用于只删除一个元素，可有的时候我们需要删除多个元素，上面的方法虽可行，但需要为每个需要删除的元素写个for循环，这样效率太低了。
使用<code>Iterator</code>可以完成上面的操作。</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
</pre></td><td class="code"><pre><code class="java"><span class="line"><span class="kd">public</span> <span class="kd">class</span> <span class="nc">ListTest</span> <span class="o">{</span>
</span><span class="line">    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="n">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>
</span><span class="line">        <span class="n">List</span><span class="o">&lt;</span><span class="n">Integer</span><span class="o">&gt;</span> <span class="n">numbers</span> <span class="o">=</span> <span class="k">new</span> <span class="n">ArrayList</span><span class="o">();</span>
</span><span class="line">        <span class="k">for</span><span class="o">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">1</span><span class="o">;</span><span class="n">i</span> <span class="o">&lt;=</span> <span class="mi">10</span><span class="o">;</span> <span class="o">++</span><span class="n">i</span><span class="o">)</span> <span class="o">{</span>
</span><span class="line">            <span class="n">numbers</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="n">i</span><span class="o">);</span>
</span><span class="line">        <span class="o">}</span>
</span><span class="line">
</span><span class="line">        <span class="k">for</span><span class="o">(</span><span class="n">Iterator</span> <span class="n">it</span><span class="o">=</span><span class="n">numbers</span><span class="o">.</span><span class="na">iterator</span><span class="o">()</span> <span class="o">;</span><span class="n">it</span><span class="o">.</span><span class="na">hasNext</span><span class="o">();</span> <span class="o">)</span> <span class="o">{</span>
</span><span class="line">            <span class="n">Integer</span> <span class="n">tmp</span> <span class="o">=</span> <span class="o">(</span><span class="n">Integer</span><span class="o">)</span> <span class="n">it</span><span class="o">.</span><span class="na">next</span><span class="o">();</span>
</span><span class="line">            <span class="k">if</span><span class="o">(</span><span class="n">tmp</span> <span class="o">==</span> <span class="mi">5</span><span class="o">)</span> <span class="o">{</span>
</span><span class="line">                <span class="n">it</span><span class="o">.</span><span class="na">remove</span><span class="o">();</span>
</span><span class="line">            <span class="o">}</span>
</span><span class="line">            <span class="k">if</span><span class="o">(</span><span class="n">tmp</span> <span class="o">==</span> <span class="mi">7</span><span class="o">)</span> <span class="o">{</span>
</span><span class="line">                <span class="n">it</span><span class="o">.</span><span class="na">remove</span><span class="o">();</span>
</span><span class="line">            <span class="o">}</span>
</span><span class="line">        <span class="o">}</span>
</span><span class="line">
</span><span class="line">        <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">numbers</span><span class="o">);</span>
</span><span class="line">    <span class="o">}</span>
</span><span class="line"><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>
<p>上面的方法虽都可以删除元素，但都需要for循环，效率不高，但没有找到更好的方法。感觉java的Iterator没有c++的那么只能，用起来没有c++顺手。</p>

<blockquote>
  <p>对Java的基础知识了解越多，代码就会写得越简洁</p>
</blockquote>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[命令行修复MBR]]></title>
    <link href="http://ztblog.github.io/blog/2013/10/09/minglinghangmbr/"/>
    <updated>2013-10-09T16:22:00+08:00</updated>
    <id>http://ztblog.github.io/blog/2013/10/09/minglinghangmbr</id>
    <content type="html"><![CDATA[<p>命令行修复MBR  </p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
</pre></td><td class="code"><pre><code class="sh"><span class="line">1、shift+F10打开命令行
</span><span class="line">2、输入：diskpart
</span><span class="line">3、输入：list disk 查看磁盘信息
</span><span class="line">4、选择你要操作的磁盘：
</span><span class="line"><span class="k">select </span>disk 0
</span><span class="line">5、输入：clean,清除分区
</span><span class="line">6、输入：convert mbr 转换为MBR分区
</span><span class="line">7、退出，重新分区OK
</span></code></pre></td></tr></table></div></figure></notextile></div>
<p>注意：在做以上操作的时候先备份文件</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[项目发布]]></title>
    <link href="http://ztblog.github.io/blog/2013/10/09/xiangmufabu/"/>
    <updated>2013-10-09T09:40:00+08:00</updated>
    <id>http://ztblog.github.io/blog/2013/10/09/xiangmufabu</id>
    <content type="html"><![CDATA[<p>1.去发布目录下建立相应的文件夹<br />
2.更改发布脚本<br />
3.执行脚本<br />
4.接下来就分两种情况了<br />
4.1静态网站
修改nginx配置文件nginx.conf<br />
在最后加上如下代码：  </p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
</pre></td><td class="code"><pre><code class="sh"><span class="line">server <span class="o">{</span>
</span><span class="line">        listen       192.168.1.xx:80;
</span><span class="line">        server_name  xxx.net;
</span><span class="line">        charset utf-8;
</span><span class="line">
</span><span class="line">        location / <span class="o">{</span>
</span><span class="line">            root   /leave/xx/deploy/xx;
</span><span class="line">
</span><span class="line">            autoindex on;
</span><span class="line">            autoindex_exact_size off;
</span><span class="line">            autoindex_localtime on;
</span><span class="line">
</span><span class="line">            index  index.html;
</span><span class="line">        <span class="o">}</span>
</span><span class="line">   <span class="o">}</span>
</span><span class="line"><span class="c">#ps:xx根据实际情况修改</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>
<p>4.2java web网站
(1)修改nginx配置文件nginx.conf<br />
在最后加上如下代码：</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
<span class="line-number">22</span>
<span class="line-number">23</span>
<span class="line-number">24</span>
</pre></td><td class="code"><pre><code class="sh"><span class="line">server <span class="o">{</span>
</span><span class="line">        listen       192.168.1.x:80;
</span><span class="line">        server_name  xxx.net;
</span><span class="line">        charset utf-8;
</span><span class="line">
</span><span class="line">        location / <span class="o">{</span>
</span><span class="line">                proxy_set_header   Host             <span class="nv">$host</span>;
</span><span class="line">                proxy_set_header   X-Real-IP        <span class="nv">$remote_addr</span>;
</span><span class="line">                proxy_set_header  X-Forwarded-For  <span class="nv">$proxy_add_x_forwarded_for</span>;
</span><span class="line">                client_max_body_size       1024m;
</span><span class="line">                client_body_buffer_size    128k;
</span><span class="line">                client_body_temp_path      data/client_body_temp;
</span><span class="line">                proxy_connect_timeout      90;
</span><span class="line">                proxy_send_timeout         90;
</span><span class="line">                proxy_read_timeout         90;
</span><span class="line">                proxy_buffer_size          4k;
</span><span class="line">                proxy_buffers              4 32k;
</span><span class="line">                proxy_busy_buffers_size    64k;
</span><span class="line">                proxy_temp_file_write_size 64k;
</span><span class="line">                proxy_temp_path            data/proxy_temp;
</span><span class="line">                proxy_pass http://127.0.0.1:8080;
</span><span class="line">        <span class="o">}</span>
</span><span class="line">   <span class="o">}</span>
</span><span class="line"><span class="c">#ps:xx根据实际情况修改</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>
<p>(2)修改tomcat配置文件server.xml
加上如下代码：</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
</pre></td><td class="code"><pre><code class="sh"><span class="line">&lt;Host <span class="nv">name</span><span class="o">=</span><span class="s2">&quot;xxx.net&quot;</span>  <span class="nv">appBase</span><span class="o">=</span><span class="s2">&quot;webapps&quot;</span> <span class="nv">unpackWARs</span><span class="o">=</span><span class="s2">&quot;true&quot;</span> <span class="nv">autoDeploy</span><span class="o">=</span><span class="s2">&quot;true&quot;</span>&gt;
</span><span class="line">	&lt;Context <span class="nv">path</span><span class="o">=</span><span class="s2">&quot;&quot;</span> <span class="nv">docBase</span><span class="o">=</span><span class="s2">&quot;/xxx/deploy/xxx&quot;</span> <span class="nv">debug</span><span class="o">=</span><span class="s2">&quot;0&quot;</span> <span class="nv">reloadable</span><span class="o">=</span><span class="s2">&quot;true&quot;</span> <span class="nv">crossContext</span><span class="o">=</span><span class="s2">&quot;true&quot;</span> /&gt;
</span><span class="line">&lt;/Host&gt;
</span><span class="line"><span class="c">#ps:xx根据实际情况修改</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>
<p>5.平滑重启nginx</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
</pre></td><td class="code"><pre><code class="sh"><span class="line">ps -aux | grep nginx
</span><span class="line">// 找到nginx master的pid
</span><span class="line"><span class="nb">kill</span> -HUP pid
</span></code></pre></td></tr></table></div></figure></notextile></div>
<p>6.如果是java web，还需重启tomcat
7.更改路由</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
</pre></td><td class="code"><pre><code class="sh"><span class="line">system-view
</span><span class="line">ip host xxx.net 192.168.1.xx
</span></code></pre></td></tr></table></div></figure></notextile></div>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[找数字分析（出现一次的数字）]]></title>
    <link href="http://ztblog.github.io/blog/2013/10/07/zhaoshuzi/"/>
    <updated>2013-10-07T23:15:00+08:00</updated>
    <id>http://ztblog.github.io/blog/2013/10/07/zhaoshuzi</id>
    <content type="html"><![CDATA[<h2 id="section">原题</h2>
<p>        数组A中，除了某一个数字X之外，其他数字都出现了三次，而X出现了一次。请给出最快的方法找到X。   </p>

<!-- more -->

<h2 id="section-1">分析</h2>
<p>        乍一看这个题目，不少同学立马给出了答案：异或。但举个例子，就会发现，异或是行不通的，一般的方法是利用异或的的如下特性：  </p>

<p>        A xor A = 0<br />
        A xor 0 = A</p>

<p>        但是这个题目中，数字都是奇数个的，直接采用之前类似题目的异或方法，已经不合适了。<br />
        除此之外，我们还可能想到如下的方法：  </p>

<p>        采用hashmap，时间复杂度O(n)，空间复杂度O(n)  </p>

<p>        对数组A进行排序，然后在遍历一次，时间复杂度O(nlogn)，空间复杂度O(1)  </p>

<p>        是否还有一些效果更好的方法呢？这一类的题目，即使简单的异或不能解决，也可以从二进制位、位操作方面去考虑，总之这样的大方向是不会错的。  </p>

<p>        题目中，如果数组中的元素都是三个三个出现的，那么从二进制表示的角度，每个位上的1加起来，应该可以整除3。如果有一个数x只出现一次，会是什么情况呢？  </p>

<p>        如果某个特定位上的1加起来，可以被3整除，说明对应x的那位是0，因为如果是1，不可能被3整除<br />
        如果某个特定位上的1加起来，不可以被3整除，说明对应x的那位是1  </p>

<p>        根据上面的描述，我们可以开辟一个大小为32的数组，第0个元素表示，A中所有元素的二进制表示的最低位的和，依次类推。最后，再转换为十进制数即可。这里要说明的是，用一个大小为32的整数数组表示，同样空间是O(1)的。<br />
        不过这里申请了一个数组的空间，如果这个是不被允许的呢？请大家开动脑筋，我们会在后续的文章中分享。  </p>

<p>代码：  </p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
<span class="line-number">22</span>
<span class="line-number">23</span>
<span class="line-number">24</span>
<span class="line-number">25</span>
<span class="line-number">26</span>
<span class="line-number">27</span>
<span class="line-number">28</span>
<span class="line-number">29</span>
<span class="line-number">30</span>
<span class="line-number">31</span>
</pre></td><td class="code"><pre><code class="cpp"><span class="line"><span class="cp">#include &lt;stdio.h&gt;</span>
</span><span class="line"><span class="cp">#include &lt;string.h&gt;</span>
</span><span class="line"><span class="cp">#include &lt;iostream&gt;</span>
</span><span class="line"><span class="cp">#include &lt;string&gt;</span>
</span><span class="line"><span class="cp">#include &lt;algorithm&gt;</span>
</span><span class="line"><span class="cp">#include &lt;map&gt;</span>
</span><span class="line"><span class="k">using</span> <span class="k">namespace</span> <span class="n">std</span><span class="p">;</span>
</span><span class="line"><span class="kt">int</span> <span class="n">a</span><span class="p">[</span><span class="mi">1000</span><span class="p">];</span>
</span><span class="line"><span class="kt">int</span> <span class="n">main</span><span class="p">()</span> <span class="p">{</span>
</span><span class="line">    <span class="kt">int</span> <span class="n">n</span><span class="p">,</span><span class="n">i</span><span class="p">,</span><span class="n">j</span><span class="p">,</span><span class="n">k</span><span class="p">,</span><span class="n">cnt</span><span class="p">,</span><span class="n">ans</span><span class="p">;</span>
</span><span class="line">    <span class="n">scanf</span><span class="p">(</span><span class="s">&quot;%d&quot;</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">n</span><span class="p">);</span>
</span><span class="line">    <span class="k">for</span><span class="p">(</span><span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span><span class="n">i</span> <span class="o">&lt;</span> <span class="n">n</span><span class="p">;</span> <span class="o">++</span><span class="n">i</span><span class="p">)</span> <span class="p">{</span>
</span><span class="line">        <span class="n">scanf</span><span class="p">(</span><span class="s">&quot;%d&quot;</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">a</span><span class="p">[</span><span class="n">i</span><span class="p">]);</span>
</span><span class="line">    <span class="p">}</span>
</span><span class="line">    <span class="kt">long</span> <span class="n">tmp</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span>
</span><span class="line">    <span class="n">ans</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span><span class="line">    <span class="k">for</span><span class="p">(</span><span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span><span class="n">i</span> <span class="o">&lt;</span> <span class="mi">32</span><span class="p">;</span> <span class="o">++</span><span class="n">i</span><span class="p">)</span> <span class="p">{</span>
</span><span class="line">        <span class="n">cnt</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span><span class="line">        <span class="k">for</span><span class="p">(</span><span class="n">j</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span><span class="n">j</span> <span class="o">&lt;</span> <span class="n">n</span><span class="p">;</span> <span class="o">++</span><span class="n">j</span><span class="p">)</span> <span class="p">{</span>
</span><span class="line">            <span class="n">cnt</span> <span class="o">+=</span> <span class="n">a</span><span class="p">[</span><span class="n">j</span><span class="p">]</span> <span class="o">&amp;</span> <span class="n">tmp</span><span class="p">;</span>
</span><span class="line">        <span class="p">}</span>
</span><span class="line">        <span class="k">if</span><span class="p">(</span><span class="n">cnt</span> <span class="o">%</span> <span class="mi">3</span> <span class="o">==</span> <span class="mi">0</span><span class="p">)</span> <span class="p">{</span>
</span><span class="line">            <span class="n">ans</span> <span class="o">=</span> <span class="n">ans</span> <span class="o">|</span> <span class="p">(</span><span class="mi">0</span><span class="o">&lt;&lt;</span><span class="n">i</span><span class="p">);</span>
</span><span class="line">        <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span><span class="line">            <span class="n">ans</span> <span class="o">=</span> <span class="n">ans</span> <span class="o">|</span> <span class="p">(</span><span class="mi">1</span><span class="o">&lt;&lt;</span><span class="n">i</span><span class="p">);</span>
</span><span class="line">        <span class="p">}</span>
</span><span class="line">        <span class="n">tmp</span> <span class="o">=</span> <span class="n">tmp</span> <span class="o">&lt;&lt;</span> <span class="mi">1</span><span class="p">;</span>
</span><span class="line">    <span class="p">}</span>
</span><span class="line">    <span class="n">printf</span><span class="p">(</span><span class="s">&quot;%d</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">,</span> <span class="n">ans</span><span class="p">);</span>
</span><span class="line">    <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
</span><span class="line"><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[括号匹配]]></title>
    <link href="http://ztblog.github.io/blog/2013/10/07/kuohaopipei/"/>
    <updated>2013-10-07T16:36:00+08:00</updated>
    <id>http://ztblog.github.io/blog/2013/10/07/kuohaopipei</id>
    <content type="html"><![CDATA[<h2 id="section">原题</h2>
<p>        给定字符串，输出括号是否匹配，例如:  </p>

<p>        1.”()” yes；<br />
        2.”)(“ no；<br />
        3.”(abcd(e)” no；<br />
        4.”(a)(b)” yes。  </p>

<p>        要求必须用递归写，整个实现不可以出现一个循环语句.</p>

<!-- more -->

<h2 id="section-1">分析</h2>
<p>        这个题目很多同学都见过了，如果没有后面的条件，会张口就说就来用栈来实现，时间复杂度O(n)，空间复杂度O(n)。这个是很好的一个解答，没有 问题的。但是我们在做面试题，准备面试的过程中，每一个题目都不应该仅仅局限于某一个方法。应该尝试更多的思路，尽管有些思路的时间、空间复杂度并不是很 好，但是可以带来变化，举一反三，这才是真正的收获。  </p>

<p>        这个题要求了，只目能使用递归并且不能出现循环语句。这个时候，我们应该如何处理呢？其实告诉了大家递归，就比较好想了：怎么定义好问题和子问题。  </p>

<p>        如果字符串中的括号是匹配的，则’(‘的数量和’)’的数量是相等的，反之是不相等的。这样，在递归的过程中，可以保存一个变量，用来记录’(‘的 数量和’)’的数量是否匹配。这样定义递归问题f(p,count)，表示当前字符p之前的字符串中’(‘的数量和’)’的数量的匹配情况，p表示指向当 前字符的指针。初始的时候，f(p, 0)，递归的过程如下：  </p>

<p>        如果p为空，则考察count是否为0，如果为0，则匹配；如果不为0，则不匹配；  </p>

<p>        如果不为空，则考察当前字符p，如果p=’(‘，则递归调用f(p++, count++);如果p=’)’，则递归调用f(p++, count–)。如果p是其他的字符，并不是’(‘和’)’，则递归调用f(p++, count)，count不变，继续考虑下一次字符。其中需要检查和保证count&gt;=0.  </p>

<p>        其实，递归的问题有的时候不是那么好像的，需要大家不断的练习。如果不采用count来记录括号匹配的情况，这个题目的递归也不好想。<br />
代码如下：</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
<span class="line-number">22</span>
<span class="line-number">23</span>
<span class="line-number">24</span>
<span class="line-number">25</span>
<span class="line-number">26</span>
<span class="line-number">27</span>
<span class="line-number">28</span>
<span class="line-number">29</span>
<span class="line-number">30</span>
<span class="line-number">31</span>
<span class="line-number">32</span>
<span class="line-number">33</span>
</pre></td><td class="code"><pre><code class="cpp"><span class="line"><span class="cp">#include &lt;stdio.h&gt;</span>
</span><span class="line"><span class="cp">#include &lt;string.h&gt;</span>
</span><span class="line"><span class="cp">#include &lt;iostream&gt;</span>
</span><span class="line"><span class="cp">#include &lt;string&gt;</span>
</span><span class="line"><span class="cp">#include &lt;algorithm&gt;</span>
</span><span class="line"><span class="cp">#include &lt;map&gt;</span>
</span><span class="line"><span class="k">using</span> <span class="k">namespace</span> <span class="n">std</span><span class="p">;</span>
</span><span class="line"><span class="kt">char</span> <span class="n">s</span><span class="p">[</span><span class="mi">10000</span><span class="p">];</span>
</span><span class="line"><span class="kt">bool</span> <span class="n">match</span><span class="p">(</span><span class="kt">char</span> <span class="o">*</span><span class="n">s</span><span class="p">,</span><span class="kt">int</span> <span class="n">count</span><span class="p">)</span> <span class="p">{</span>
</span><span class="line">    <span class="k">if</span><span class="p">(</span><span class="o">!*</span><span class="n">s</span> <span class="o">&amp;&amp;</span> <span class="n">count</span><span class="o">==</span><span class="mi">0</span><span class="p">)</span>
</span><span class="line">        <span class="k">return</span> <span class="kc">true</span><span class="p">;</span>
</span><span class="line">    <span class="k">else</span> <span class="k">if</span><span class="p">(</span><span class="o">!*</span><span class="n">s</span> <span class="o">&amp;&amp;</span> <span class="n">count</span><span class="o">!=</span><span class="mi">0</span><span class="p">)</span>
</span><span class="line">        <span class="k">return</span> <span class="kc">false</span><span class="p">;</span>
</span><span class="line">    <span class="k">if</span><span class="p">(</span><span class="n">count</span> <span class="o">&lt;</span> <span class="mi">0</span><span class="p">)</span>
</span><span class="line">        <span class="k">return</span> <span class="kc">false</span><span class="p">;</span>
</span><span class="line">    <span class="k">if</span><span class="p">(</span><span class="o">*</span><span class="n">s</span> <span class="o">==</span> <span class="sc">&#39;(&#39;</span><span class="p">)</span>
</span><span class="line">        <span class="n">match</span><span class="p">(</span><span class="n">s</span><span class="o">+</span><span class="mi">1</span><span class="p">,</span><span class="n">count</span><span class="o">+</span><span class="mi">1</span><span class="p">);</span>
</span><span class="line">    <span class="k">else</span> <span class="k">if</span><span class="p">(</span><span class="o">*</span><span class="n">s</span> <span class="o">==</span> <span class="sc">&#39;)&#39;</span><span class="p">)</span>
</span><span class="line">        <span class="n">match</span><span class="p">(</span><span class="n">s</span><span class="o">+</span><span class="mi">1</span><span class="p">,</span><span class="n">count</span><span class="o">-</span><span class="mi">1</span><span class="p">);</span>
</span><span class="line">    <span class="k">else</span>
</span><span class="line">        <span class="n">match</span><span class="p">(</span><span class="n">s</span><span class="o">+</span><span class="mi">1</span><span class="p">,</span><span class="n">count</span><span class="p">);</span>
</span><span class="line"><span class="p">}</span>
</span><span class="line"><span class="kt">int</span> <span class="n">main</span><span class="p">()</span> <span class="p">{</span>
</span><span class="line">    <span class="k">while</span><span class="p">(</span><span class="o">~</span><span class="n">scanf</span><span class="p">(</span><span class="s">&quot;%s&quot;</span><span class="p">,</span><span class="n">s</span><span class="p">))</span> <span class="p">{</span>
</span><span class="line">        <span class="k">if</span><span class="p">(</span><span class="n">match</span><span class="p">(</span><span class="n">s</span><span class="p">,</span><span class="mi">0</span><span class="p">))</span> <span class="p">{</span>
</span><span class="line">            <span class="n">printf</span><span class="p">(</span><span class="s">&quot;yes!</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">);</span>
</span><span class="line">        <span class="p">}</span>
</span><span class="line">        <span class="k">else</span> <span class="p">{</span>
</span><span class="line">            <span class="n">printf</span><span class="p">(</span><span class="s">&quot;no!</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">);</span>
</span><span class="line">        <span class="p">}</span>
</span><span class="line">    <span class="p">}</span>
</span><span class="line">    <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
</span><span class="line"><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[第一篇博文]]></title>
    <link href="http://ztblog.github.io/blog/2013/10/07/first-blog/"/>
    <updated>2013-10-07T16:13:00+08:00</updated>
    <id>http://ztblog.github.io/blog/2013/10/07/first-blog</id>
    <content type="html"><![CDATA[<p>        这个博客的第一篇博文。  </p>

<p>        以前用过wordpress，不过基本没有去维护它，上面也没有东西。这次选择了Octopress，他是基于markdown的，挂在github上，无限流量。最主要的还是喜欢它那句宣传语。</p>

<p>        这个博客来得不易啊，前前后后折腾了好多。主要还是太菜了，啥也不会。</p>

<p>        搭的时候看了很多网上的教材，都大同小异，开始的时候也不是很细心，不是这出错就是那出错。</p>

<p>        最后还是看了官网教程，上面说的肯定是对的，虽然是英文，还是能看懂的。</p>

<p>        以后要学生么东西，最好还是看看官方说明吧，虽说网上好多都和官方说的差不多，但有时候还是会有一些差异的。</p>

<p>        这个博客来的不易，也希望自己以后能多写点东西，多做点记录。也是对所学东西的总结。</p>

<p>        最后，贴上octopress的官网：<a href="http://octopress.org/">http://octopress.org/</a></p>

<blockquote>
  <p>像黑客一样写博客。</p>
</blockquote>
]]></content>
  </entry>
  
</feed>
